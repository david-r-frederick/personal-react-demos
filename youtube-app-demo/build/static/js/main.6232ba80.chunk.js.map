{"version":3,"sources":["Header/Header.js","Results/Results.js","Comments/CommentInput.js","App.js","serviceWorker.js","index.js","Header/Header.module.css","Results/Results.module.css"],"names":["Header","props","state","className","classes","title","searchInput","onChange","event","changed","target","value","onKeyDown","pressed","key","searchBtn","onClick","this","search","Component","results","resultVideoTitles","resultsContainer","noResults","map","index","resultBtn","setVidId","replace","comments","inputValue","inputClicked","setState","addComment","App","videoId","resultVideoIds","searchString","axios","get","then","response","data","items","el","snippet","id","catch","err","alert","text","searchHandler","style","width","opts","height","playerVars","autoplay","Results","CommentInput","prevState","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.6232ba80.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './Header.module.css';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <p className={classes.title}>YouTube Demo</p>\r\n                <input\r\n                    className={classes.searchInput}\r\n                    onChange={(event) => this.props.changed(event.target.value)}\r\n                    onKeyDown={(event) => this.props.pressed(event.key)}\r\n                ></input>\r\n                <button className={classes.searchBtn} onClick={this.props.search}>Search</button>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport classes from './Results.module.css';\r\n\r\nclass results extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={this.props.resultVideoTitles !== null ? classes.resultsContainer : classes.noResults}\r\n            >\r\n                {this.props.resultVideoTitles ? (\r\n                    this.props.resultVideoTitles.map((title, index) => {\r\n                        return (\r\n                            <button\r\n                                className={classes.resultBtn}\r\n                                key={title}\r\n                                onClick={() => this.props.setVidId(index)\r\n                                }\r\n                            >\r\n                                {title.replace(/&#39;/g, \"'\")}\r\n                            </button>\r\n                        );\r\n                    })\r\n                ) : <p>Results Will Display Here</p>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default results;","import React, { Component } from 'react';\r\n\r\nclass comments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: 'Leave a comment...',\r\n            inputClicked: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                className=\"commentInput\"\r\n                value={this.state.inputValue}\r\n                onChange={(event) =>\r\n                    this.setState({ inputValue: event.target.value })\r\n                }\r\n                onClick={() => {\r\n                    if(!this.state.inputClicked) {\r\n                        this.setState({inputClicked: true, inputValue: ''});   \r\n                    }\r\n                }}\r\n                onKeyDown={(event) => {\r\n                    if(event.key === 'Enter'){\r\n                        this.props.addComment(this.state.inputValue);\r\n                        this.setState({ inputClicked: false, inputValue: ''});}\r\n                }\r\n                }\r\n            ></input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default comments;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport Header from './Header/Header';\nimport Results from './Results/Results';\nimport CommentInput from './Comments/CommentInput';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoId: null,\n            resultVideoTitles: null,\n            resultVideoIds: null,\n            searchString: null,\n            comments: [],\n        };\n    }\n\n    searchHandler() {\n        axios\n            .get(\n                `https://www.googleapis.com/youtube/v3/search?part=snippet&key=AIzaSyC3MyXW8saacX0g22HEwGFkLuju69XxGws&type=video&q=${this.state.searchString}`\n            )\n            .then((response) => {\n                this.setState({\n                    resultVideoTitles: response.data.items.map((el) => {\n                        return el.snippet.title;\n                    }),\n                    resultVideoIds: response.data.items.map((el) => {\n                        return el.id.videoId;\n                    }),\n                });\n            })\n            .catch((err) => alert(err));\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    <Header\n                        changed={(text) => {\n                            this.setState({\n                                searchString: text,\n                            });\n                        }}\n                        pressed={(key) => {\n                            if (key === 'Enter') {\n                                this.searchHandler();\n                            }\n                        }}\n                        search={() => this.searchHandler()}\n                    />\n                </div>\n                <div style={{\n                    width: '80%'\n                }}>\n                    <div className=\"videoSection\">\n                        <YouTube\n                            videoId={this.state.videoId ? this.state.videoId : null}\n                            opts={{\n                                width: 740,\n                                height: 460,\n                                playerVars: {\n                                    autoplay: 1\n                                },\n                            }}\n                        />\n                        <Results\n                            resultVideoTitles={this.state.resultVideoTitles}\n                            setVidId={(index) => {\n                                this.setState({\n                                    videoId: this.state.resultVideoIds[index],\n                                });\n                            }}\n                        />\n                    </div>\n                    <div className=\"commentSection\">\n                        <CommentInput\n                            addComment={(text) => {\n                                this.setState((prevState) => {\n                                    return {\n                                        comments: prevState.comments.concat(text),\n                                    };\n                                });\n                            }}\n                        />\n                        {this.state.comments.map((el) => {\n                            return <p className=\"comment\">{el}</p>;\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3yQTR\",\"searchInput\":\"Header_searchInput__1E-cV\",\"searchBtn\":\"Header_searchBtn__3z1bn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsContainer\":\"Results_resultsContainer__1M221\",\"noResults\":\"Results_noResults__3C1aw\"};"],"sourceRoot":""}